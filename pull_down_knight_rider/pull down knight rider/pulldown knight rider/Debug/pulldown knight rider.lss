
pulldown knight rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000120  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000628  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000007d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000025e  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000333  00000000  00000000  00000fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  0000130f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001357  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main (){
	DDRC = 0xFF;                                   // all o/p's
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	DDRB=0x00;
  70:	17 ba       	out	0x17, r1	; 23
	while(1){
		
		if ((PINB & 0x01)==1){
			for (PORTC = 0x01; PORTC != 0; PORTC<<=1)
  72:	21 e0       	ldi	r18, 0x01	; 1
			{  // shift left
				_delay_ms(100);
			}                          // pause
			
			for (PORTC = 0x80; PORTC != 0; PORTC>>=1)
  74:	90 e8       	ldi	r25, 0x80	; 128
int main (){
	DDRC = 0xFF;                                   // all o/p's
	DDRB=0x00;
	while(1){
		
		if ((PINB & 0x01)==1){
  76:	b0 9b       	sbis	0x16, 0	; 22
  78:	fe cf       	rjmp	.-4      	; 0x76 <main+0xa>
			for (PORTC = 0x01; PORTC != 0; PORTC<<=1)
  7a:	25 bb       	out	0x15, r18	; 21
  7c:	85 b3       	in	r24, 0x15	; 21
  7e:	88 23       	and	r24, r24
  80:	79 f0       	breq	.+30     	; 0xa0 <main+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	3f ef       	ldi	r19, 0xFF	; 255
  84:	41 ee       	ldi	r20, 0xE1	; 225
  86:	84 e0       	ldi	r24, 0x04	; 4
  88:	31 50       	subi	r19, 0x01	; 1
  8a:	40 40       	sbci	r20, 0x00	; 0
  8c:	80 40       	sbci	r24, 0x00	; 0
  8e:	e1 f7       	brne	.-8      	; 0x88 <main+0x1c>
  90:	00 c0       	rjmp	.+0      	; 0x92 <main+0x26>
  92:	00 00       	nop
  94:	85 b3       	in	r24, 0x15	; 21
  96:	88 0f       	add	r24, r24
  98:	85 bb       	out	0x15, r24	; 21
  9a:	85 b3       	in	r24, 0x15	; 21
  9c:	81 11       	cpse	r24, r1
  9e:	f1 cf       	rjmp	.-30     	; 0x82 <main+0x16>
			{  // shift left
				_delay_ms(100);
			}                          // pause
			
			for (PORTC = 0x80; PORTC != 0; PORTC>>=1)
  a0:	95 bb       	out	0x15, r25	; 21
  a2:	85 b3       	in	r24, 0x15	; 21
  a4:	88 23       	and	r24, r24
  a6:	39 f3       	breq	.-50     	; 0x76 <main+0xa>
  a8:	3f ef       	ldi	r19, 0xFF	; 255
  aa:	41 ee       	ldi	r20, 0xE1	; 225
  ac:	84 e0       	ldi	r24, 0x04	; 4
  ae:	31 50       	subi	r19, 0x01	; 1
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	e1 f7       	brne	.-8      	; 0xae <main+0x42>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <main+0x4c>
  b8:	00 00       	nop
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	86 95       	lsr	r24
  be:	85 bb       	out	0x15, r24	; 21
  c0:	85 b3       	in	r24, 0x15	; 21
  c2:	81 11       	cpse	r24, r1
  c4:	f1 cf       	rjmp	.-30     	; 0xa8 <main+0x3c>
  c6:	d7 cf       	rjmp	.-82     	; 0x76 <main+0xa>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
