
ATmega knight rider.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000014c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000628  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000586  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032f  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001347  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 61 00 	jmp	0xc2	; 0xc2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:

#include <avr/io.h>
#include <util/delay.h>

int main (){
	DDRC = 0xFF;                                   // all o/p's
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20

	while(1){                                     // forever
		
		for (PORTC = 0x01; PORTC != 0; PORTC <<= 1)   // shift left
  70:	21 e0       	ldi	r18, 0x01	; 1
		_delay_ms(100);                             // pause
		
		for (PORTC = 0x80; PORTC != 0; PORTC >>= 1)   // shift right
  72:	90 e8       	ldi	r25, 0x80	; 128
int main (){
	DDRC = 0xFF;                                   // all o/p's

	while(1){                                     // forever
		
		for (PORTC = 0x01; PORTC != 0; PORTC <<= 1)   // shift left
  74:	25 bb       	out	0x15, r18	; 21
  76:	85 b3       	in	r24, 0x15	; 21
  78:	88 23       	and	r24, r24
  7a:	79 f0       	breq	.+30     	; 0x9a <main+0x2e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	3f ef       	ldi	r19, 0xFF	; 255
  7e:	41 ee       	ldi	r20, 0xE1	; 225
  80:	84 e0       	ldi	r24, 0x04	; 4
  82:	31 50       	subi	r19, 0x01	; 1
  84:	40 40       	sbci	r20, 0x00	; 0
  86:	80 40       	sbci	r24, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
  8e:	85 b3       	in	r24, 0x15	; 21
  90:	88 0f       	add	r24, r24
  92:	85 bb       	out	0x15, r24	; 21
  94:	85 b3       	in	r24, 0x15	; 21
  96:	81 11       	cpse	r24, r1
  98:	f1 cf       	rjmp	.-30     	; 0x7c <main+0x10>
		_delay_ms(100);                             // pause
		
		for (PORTC = 0x80; PORTC != 0; PORTC >>= 1)   // shift right
  9a:	95 bb       	out	0x15, r25	; 21
  9c:	85 b3       	in	r24, 0x15	; 21
  9e:	88 23       	and	r24, r24
  a0:	49 f3       	breq	.-46     	; 0x74 <main+0x8>
  a2:	3f ef       	ldi	r19, 0xFF	; 255
  a4:	41 ee       	ldi	r20, 0xE1	; 225
  a6:	84 e0       	ldi	r24, 0x04	; 4
  a8:	31 50       	subi	r19, 0x01	; 1
  aa:	40 40       	sbci	r20, 0x00	; 0
  ac:	80 40       	sbci	r24, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x46>
  b2:	00 00       	nop
  b4:	85 b3       	in	r24, 0x15	; 21
  b6:	86 95       	lsr	r24
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	85 b3       	in	r24, 0x15	; 21
  bc:	81 11       	cpse	r24, r1
  be:	f1 cf       	rjmp	.-30     	; 0xa2 <main+0x36>
  c0:	d9 cf       	rjmp	.-78     	; 0x74 <main+0x8>

000000c2 <_exit>:
  c2:	f8 94       	cli

000000c4 <__stop_program>:
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <__stop_program>
