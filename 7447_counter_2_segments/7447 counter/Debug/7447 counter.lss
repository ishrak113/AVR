
7447 counter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000104  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000104  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000684  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000597  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000250  00000000  00000000  00000e2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000331  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  000013e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 80 00 	jmp	0x100	; 0x100 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#include <avr/io.h>
#include <util/delay.h>

int main()
{
  82:	cf 93       	push	r28
  84:	df 93       	push	r29
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  8a:	2a 97       	sbiw	r28, 0x0a	; 10
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	f8 94       	cli
  90:	de bf       	out	0x3e, r29	; 62
  92:	0f be       	out	0x3f, r0	; 63
  94:	cd bf       	out	0x3d, r28	; 61
	char output[] = {0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09};
  96:	8a e0       	ldi	r24, 0x0A	; 10
  98:	e0 e6       	ldi	r30, 0x60	; 96
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	de 01       	movw	r26, r28
  9e:	11 96       	adiw	r26, 0x01	; 1
  a0:	01 90       	ld	r0, Z+
  a2:	0d 92       	st	X+, r0
  a4:	8a 95       	dec	r24
  a6:	e1 f7       	brne	.-8      	; 0xa0 <main+0x1e>
	DDRC= 0x0f;
  a8:	8f e0       	ldi	r24, 0x0F	; 15
  aa:	84 bb       	out	0x14, r24	; 20
	DDRD= 0x0f;
  ac:	81 bb       	out	0x11, r24	; 17
  ae:	9e 01       	movw	r18, r28
  b0:	25 5f       	subi	r18, 0xF5	; 245
  b2:	3f 4f       	sbci	r19, 0xFF	; 255

#include <avr/io.h>
#include <util/delay.h>

int main()
{
  b4:	be 01       	movw	r22, r28
  b6:	6f 5f       	subi	r22, 0xFF	; 255
  b8:	7f 4f       	sbci	r23, 0xFF	; 255
  ba:	46 2f       	mov	r20, r22
  bc:	97 2f       	mov	r25, r23
  be:	db 01       	movw	r26, r22
  c0:	1c c0       	rjmp	.+56     	; 0xfa <main+0x78>
		
		for(int i=0;i<=9;i++)
		{
			for (int j=0;j<=9;j++)
			{
				PORTD=output[j];
  c2:	81 91       	ld	r24, Z+
  c4:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c6:	1f ef       	ldi	r17, 0xFF	; 255
  c8:	59 e6       	ldi	r21, 0x69	; 105
  ca:	88 e1       	ldi	r24, 0x18	; 24
  cc:	11 50       	subi	r17, 0x01	; 1
  ce:	50 40       	sbci	r21, 0x00	; 0
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x4a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <main+0x54>
  d6:	00 00       	nop
	while (1)
	{
		
		for(int i=0;i<=9;i++)
		{
			for (int j=0;j<=9;j++)
  d8:	2e 17       	cp	r18, r30
  da:	3f 07       	cpc	r19, r31
  dc:	91 f7       	brne	.-28     	; 0xc2 <main+0x40>
			{
				PORTD=output[j];
				_delay_ms(500);
			}
			
			PORTC = output[i];
  de:	8d 91       	ld	r24, X+
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	ef ef       	ldi	r30, 0xFF	; 255
  e4:	19 e6       	ldi	r17, 0x69	; 105
  e6:	58 e1       	ldi	r21, 0x18	; 24
  e8:	e1 50       	subi	r30, 0x01	; 1
  ea:	10 40       	sbci	r17, 0x00	; 0
  ec:	50 40       	sbci	r21, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x66>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x70>
  f2:	00 00       	nop
	DDRD= 0x0f;
	
	while (1)
	{
		
		for(int i=0;i<=9;i++)
  f4:	a2 17       	cp	r26, r18
  f6:	b3 07       	cpc	r27, r19
  f8:	11 f3       	breq	.-60     	; 0xbe <main+0x3c>

#include <avr/io.h>
#include <util/delay.h>

int main()
{
  fa:	e4 2f       	mov	r30, r20
  fc:	f9 2f       	mov	r31, r25
  fe:	e1 cf       	rjmp	.-62     	; 0xc2 <main+0x40>

00000100 <_exit>:
 100:	f8 94       	cli

00000102 <__stop_program>:
 102:	ff cf       	rjmp	.-2      	; 0x102 <__stop_program>
